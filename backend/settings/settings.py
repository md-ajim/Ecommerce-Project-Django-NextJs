"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os

from pathlib import Path
from oauth2_provider import settings as oauth2_settings
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-pw*nvb76sgv4b5=s4h@(r20&2)b8o4vna^^@a%+k%^lvkj0$*o"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",  # simpleJwt Auth
    "rest_framework_social_oauth2",
    "rest_framework.authtoken",
    "django.contrib.sites",
    "oauth2_provider",
    "social_django",
    "drf_social_oauth2",
    "django_filters",
    "corsheaders",
    "Item",
    "User",
    'Order',
]


AUTH_USER_MODEL = 'Item.User'  # Replace 'Item' with the app where the custom User model is defined


AUTHENTICATION_BACKENDS = (
    
    "social_core.backends.facebook.FacebookAppOAuth2",
    "social_core.backends.facebook.FacebookOAuth2",
    "social_core.backends.twitter.TwitterOAuth",
    # Google  OAuth2
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.apple.AppleIdAuth",
    # drf-social-oauth2
    "drf_social_oauth2.backends.DjangoOAuth2",
    # Django
    "django.contrib.auth.backends.ModelBackend",
    # "allauth.account.auth_backends.AuthenticationBackend",
)

# Google configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = (
    "61059384091-nvpd7k9cefk7hiv1kusif7edvg8trttc.apps.googleusercontent.com"
)
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "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"


SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
]


SOCIAL_AUTH_FACEBOOK_KEY = "845892604136644"
SOCIAL_AUTH_FACEBOOK_SECRET = "4592a488f95e6c42201307b96a81da3e"
SOCIAL_AUTH_FACEBOOK_SCOPE = ["email"]  # Optional, additional permissions

SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {"fields": "id, name, email"}


# expires in 6 months
oauth2_settings.DEFAULTS["ACCESS_TOKEN_EXPIRE_SECONDS"]




MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT Authentication
        'rest_framework.authentication.TokenAuthentication',           # Optional
        'rest_framework.authentication.BasicAuthentication',           # Optional
        'rest_framework.authentication.SessionAuthentication',         # Optional
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication', # Optional
        'drf_social_oauth2.authentication.SocialAuthentication',       # Optional
    ],
    
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",          # Optional: add other filter backends as needed
    ],

    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 8000,
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}




# settings.py



# Simple JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),  # Adjust as needed
    'REFRESH_TOKEN_LIFETIME': timedelta(days=350),     # Adjust as needed
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),  # JWT token prefix in header
    'ALGORITHM': 'HS256',
}









CORS_ORIGIN_ALLOW_ALL = False


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]


# REST_USE_JWT = True
# # JWT_AUTH_COOKIE = "my-app-auth"
# JWT_AUTH_COOKIE = "User"
# JWT_AUTH_REFRESH_COOKIE = "my-refresh-token"  # simpleJwt Auth


ROOT_URLCONF = "settings.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates"
        ],  # This is where you define your templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "settings.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "a_",
        "USER": "root",
        "PASSWORD": "Admin01780344340@",
        "HOST": "localhost",  # Or your MySQL server IP
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATIC_URL = "static/"  # URL prefix for static files
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Where Django looks for static files
]

# If you want to collect static files to a single location (for production)
STATIC_ROOT = (
    BASE_DIR / "staticfiles"
)  # Where static files are collected during 'collectstatic'


# Media files (uploaded by users)
MEDIA_URL = "/media/"  # URL prefix for media files
MEDIA_ROOT = BASE_DIR / "media"  # Where media files are stored


#  Gmail SMTP Configuration

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "azimislam0177@gmail.com"
EMAIL_HOST_PASSWORD = "nfjn psaq vtre thdh"
DEFAULT_FROM_EMAIL = "azimulislam017@gmail.com"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SITE_ID = 1


# settings.py (test mode)
STRIPE_SECRET_KEY = 'sk_test_51QJquZ13Cc4xkRIKyPvv0lnJX4F0dQfScdm7hrW3kAMtdwpCiEXoVaD7jIKUZeTYEfACSxdK8lKx0UKzUBYAeBPg00Zbihzwup'
STRIPE_PUBLISHABLE_KEY = 'pk_test_51QJquZ13Cc4xkRIKGGPHjGYAVI5yEJQ8eZLiZb3cUtC41CDkOOyFyKqqfD2AllKwbOowPoPhZGecESmcr2VC0zxW00Xxe5BPpi'
